git 命令学习的记录

//建立一个目录，然后生成一个库

	cd a/somewhere 
	mkdir /reposiName
	pwd  // 显示当前目录

//初始化仓库，添加文件到仓库

	git init // 初始化一个Git仓库

	1、使用 git add -filename.xxx-
	2、使用 git commit -m "提交信息....."
	
	git log 命令显示所有的提交日志，后加参数 --pretty=oneline  精简显示每次的日志 { 版本号 提示信息}

	使用 cat -filename.xxx- 显示文件内容

//版本回退的相关命令

	使用 git reset --hard HEAD^ 回到前一个版本
	使用 git reset --hard HEAD^^ 回到前两个版本
	使用 git reset --hard HEAD^^^ 回到前三个版本

	版本过多可以使用 数字或者版本号回退
		使用 git reset --hard HEAD~n 回到前n个版本
		使用 git reset --hard commit-id 回到对应的版本

	在回退前可以 使用 git log 查看提交历史
	要重返未来，使用 git reflog 查看命令历史来确定要回到那个版本
//工作区和暂存区理解
	工作区：
		工作区是指电脑能看到的文件目录
	版本库：
		工作区中的隐藏目录.git不算是工作区，是Git的版本库，Git的版本库中存了stage（或者index）
		Git自动创建一个master分支，和一个指向master的指针HEAD
		https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0
		
//管理文件的修改
	Git比其他版本控制系统的优点在于，跟踪管理的是修改而不是文件，也就是说添加文件的操作内涵是，git add filename.xxx 将一次修改放入暂存区stage（index），git commit只负责将存入暂存区的内容提交了。
		
		每次修改，如果不add到暂存区，那就不会加入到commit中了。

//撤销修改
		1、当你改乱了工作区的某个文件的内容，想直接去掉工作区的修改 
		git checkout -- file  //可以丢弃掉工作区的修改,就是让这个文件回到最近一次 git commit 或 git add 时的状态。
	
		2、当你不但改乱了工作区的某个文件内容，还添加到了暂存区时，想丢弃修改，分两步，第一步使用 git reset HEAD file ，第二部按照情况1操作。
		
		3、已经提交了不合适的修改到版本库是，想要撤销本次提交，可以参照版本回退，不过前提是没有推送到远程库。

//删除文件
	使用 git rm filename.xxx 删除文件，使用 git commit -m "提示信息" 来提交删除
	
	当你在删除错误的情况下，可以使用 git checkout -- filename.xxx 来恢复文件
	
	如果一个文件被提交到版本库了，那么永远不用担心误删，但是要小心只能恢复到最新的版本，你会丢失最近一次提交后你修改的内容。
//远程仓库
	我们完全可以自己搭建一台运行Git的服务器，也可以注册一个GitHub账号，就可以免费获得Git远程仓库。
	1、添加远程库
	需要关联远程库的时候，使用的命令:
	 	 git remote add origin git@server-name:path/repositoryname.git;
		 比如：git remote add origin git@github.com:hewenyuann19930327/vscode-nextgenas.git;
		 添加关联后，使用命令：
		 git push -u origin master 
		 一次推送 master 分支的所有内容；每次本地提交之后，只要有必要，就可以使用命令推送最新的修改到服务器。
	总结： 分布式版本系统最大的好处之一就是，在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，没网的话只需要等到有网推送一下本地文件就可以同步了。
	2、从远程库克隆
		要克隆一个仓库，首先知道地址，在使用命令：
		git clone git@server-name:path/repositoryname.git;
		比如：git clone git@github.com:hewenyuann19930327/GitLearnTest.gitgit@github.com:hewenyuann19930327/GitLearnTest.git

	不得不说，github 的地址不止一个，还可以用https://github.com/path/repositoryname.git; 实际上Git支持多种协议，默认使用git:// 使用ssh，但是也可以使用https等其他协议。
//分支管理
	有了分支你可以创建一个属于自己的分支，就是平行的宇宙，而且Git的分支与众不同，无论什么操作1秒钟之内都能完成。

	1、创建与合并分支
		Git 鼓励大量使用分支：
			查看分支：git branch
			创建分支：git branch <name>
			切换分支：git checkout <name>
			创建并切换分支：git checkout -b <name>
			合并某分支到当前分支：git merge <name>
			删除分支：git branch -d <name>
		例子： 
		1) git checkout -b dev // 两个命令一起执行，先创建一个dev分支，然后切换到dev分支
			a) git branch dev // 创建一个分支
			b) git checkout dev // 切换到 dev 分支
			c) git branch // 查看分支
		2) 然后可以在这个分支进行操作和工作 添加文件 (git add name) 和 提交更改 (git commit -m "message"),切换回 master(git checkout master)分支后把dev分支上的成果合并到master分支 (git merge dev)上。
		当在合并后不需要此分支后可以使用 git branch -d dev 来删除这个分支
	2、解决冲突
		当Git 无法自动合并分支时，就必须先解决冲突，再提交，合并完成。用git log --graph 命令可以查看分支合并图。
	3、分支管理策略
		实际开发中，我们应该按照几个基本原则进行分支管理：
			首先，master 分支应该是非常稳定的，也就是仅仅来发布新版本，平时不再上面干活；
			那么问题来了在哪里干活呢？干活都在 dev 分支上，也就是说，dev 分支是不稳定的，到某个时候，比如需要发布1.0 版本的时候，再把 dev 分支合并到master上，在master分支发布1.0版本；
			开发人员都有一个自己的分支，都在自己的分支上开发，时不时往 dev 分支上合并就可以了。
		总结Git分支十分强大，团队开发中应该充分利用。
		合并分支时，加上 --no-ff 参数就可以使用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 Fast-forward 合并就看不出来曾经做过合并。
	4、Bug分支
		在工作的时候如果需要修复bug，我们就需要建立一个临时分支来修复，修复后合并分支，然后将临时分支删除。
		当接到bug修复任务时，自然的需要建立一个临时的bug 分支来进行修复，但是此时dev分支下正在开发的工作还没有提交，但是短时间工作又完不成，bug修复任务又比较急，
		这时候就可以使用stash 功能，我们可以把工作现场“储藏”起来，等以后恢复现场后继续工作。
		使用 git stash 把现场“储藏”一下，然后修复bug，修复后 使用 git stash list 中查看 stash 。使用 git stash pop 回到工作现场同时删除 stash。
			关于stash 的理解，没有执行add操作处于stage状态的文件是会显示在各个分支中的会让你感到迷惑。在执行add 操作使文件进入stage暂存区的时候，文件在各个分支中是可见的，并且无法被stash的，
			所以stash起作用的全是stage或者head的文件，官网：也就是被你修改过得被追踪文件和暂存的变更---并将它保存到一个未完结的变更的堆栈中，随时可以重新应用。
	5、Feature分支
		在添加新功能时最好新建一个feature分支，在上面开发，完成后合并最后删除该分支。
		如果需要丢弃一个没有被合并的分支，可以通过 git branch -D <name> 强行删除。

		
	