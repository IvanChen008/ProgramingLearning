git 命令学习的记录

//建立一个目录，然后生成一个库

	cd a/somewhere 
	mkdir /reposiName
	pwd  // 显示当前目录

//初始化仓库，添加文件到仓库

	git init // 初始化一个Git仓库

	1、使用 git add -filename.xxx-
	2、使用 git commit -m "提交信息....."
	
	git log 命令显示所有的提交日志，后加参数 --pretty=oneline  精简显示每次的日志 { 版本号 提示信息}

	使用 cat -filename.xxx- 显示文件内容

//版本回退的相关命令

	使用 git reset --hard HEAD^ 回到前一个版本
	使用 git reset --hard HEAD^^ 回到前两个版本
	使用 git reset --hard HEAD^^^ 回到前三个版本

	版本过多可以使用 数字或者版本号回退
		使用 git reset --hard HEAD~n 回到前n个版本
		使用 git reset --hard commit-id 回到对应的版本

	在回退前可以 使用 git log 查看提交历史
	要重返未来，使用 git reflog 查看命令历史来确定要回到那个版本
//工作区和暂存区理解
	工作区：
		工作区是指电脑能看到的文件目录
	版本库：
		工作区中的隐藏目录.git不算是工作区，是Git的版本库，Git的版本库中存了stage（或者index）
		Git自动创建一个master分支，和一个指向master的指针HEAD
		https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0
		
//管理文件的修改
	Git比其他版本控制系统的优点在于，跟踪管理的是修改而不是文件，也就是说添加文件的操作内涵是，git add filename.xxx 将一次修改放入暂存区stage（index），git commit只负责将存入暂存区的内容提交了。
		
		每次修改，如果不add到暂存区，那就不会加入到commit中了。

//撤销修改
		1、当你改乱了工作区的某个文件的内容，想直接去掉工作区的修改 
		git checkout -- file  //可以丢弃掉工作区的修改,就是让这个文件回到最近一次 git commit 或 git add 时的状态。
	
		2、当你不但改乱了工作区的某个文件内容，还添加到了暂存区时，想丢弃修改，分两步，第一步使用 git reset HEAD file ，第二部按照情况1操作。
		
		3、已经提交了不合适的修改到版本库是，想要撤销本次提交，可以参照版本回退，不过前提是没有推送到远程库。

//删除文件
	使用 git rm filename.xxx 删除文件，使用 git commit -m "提示信息" 来提交删除
	
	当你在删除错误的情况下，可以使用 git checkout -- filename.xxx 来恢复文件
	
	如果一个文件被提交到版本库了，那么永远不用担心误删，但是要小心只能恢复到最新的版本，你会丢失最近一次提交后你修改的内容。
//远程仓库
	我们完全可以自己搭建一台运行Git的服务器，也可以注册一个GitHub账号，就可以免费获得Git远程仓库。
	1、添加远程库
	需要关联远程库的时候，使用的命令:
	 	 git remote add origin git@server-name:path/repositoryname.git;
		 比如：git remote add origin git@github.com:hewenyuann19930327/vscode-nextgenas.git;
		 添加关联后，使用命令：
		 git push -u origin master 
		 一次推送 master 分支的所有内容；每次本地提交之后，只要有必要，就可以使用命令推送最新的修改到服务器。
	总结： 分布式版本系统最大的好处之一就是，在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，没网的话只需要等到有网推送一下本地文件就可以同步了。
	2、从远程库克隆
		要克隆一个仓库，首先知道地址，在使用命令：
		git clone git@server-name:path/repositoryname.git;
		比如：git clone git@github.com:hewenyuann19930327/GitLearnTest.gitgit@github.com:hewenyuann19930327/GitLearnTest.git

	不得不说，github 的地址不止一个，还可以用https://github.com/path/repositoryname.git; 实际上Git支持多种协议，默认使用git:// 使用ssh，但是也可以使用https等其他协议。
//分支管理
	有了分支你可以创建一个属于自己的分支，就是平行的宇宙，而且Git的分支与众不同，无论什么操作1秒钟之内都能完成。

	1、创建与合并分支
		Git 鼓励大量使用分支：
			查看分支：git branch
			创建分支：git branch <name>
			切换分支：git checkout <name>
			创建并切换分支：git checkout -b <name>
			合并某分支到当前分支：git merge <name>
			删除分支：git branch -d <name>
		例子： 
		1) git checkout -b dev // 两个命令一起执行，先创建一个dev分支，然后切换到dev分支
			a) git branch dev // 创建一个分支
			b) git checkout dev // 切换到 dev 分支
			c) git branch // 查看分支
		2) 然后可以在这个分支进行操作和工作 添加文件 (git add name) 和 提交更改 (git commit -m "message"),切换回 master(git checkout master)分支后把dev分支上的成果合并到master分支 (git merge dev)上。
		当在合并后不需要此分支后可以使用 git branch -d dev 来删除这个分支
	2、解决冲突
		当Git 无法自动合并分支时，就必须先解决冲突，再提交，合并完成。用git log --graph 命令可以查看分支合并图。
	3、分支管理策略
		实际开发中，我们应该按照几个基本原则进行分支管理：
			首先，master 分支应该是非常稳定的，也就是仅仅来发布新版本，平时不再上面干活；
			那么问题来了在哪里干活呢？干活都在 dev 分支上，也就是说，dev 分支是不稳定的，到某个时候，比如需要发布1.0 版本的时候，再把 dev 分支合并到master上，在master分支发布1.0版本；
			开发人员都有一个自己的分支，都在自己的分支上开发，时不时往 dev 分支上合并就可以了。
		总结Git分支十分强大，团队开发中应该充分利用。
		合并分支时，加上 --no-ff 参数就可以使用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 Fast-forward 合并就看不出来曾经做过合并。
	4、Bug分支
		在工作的时候如果需要修复bug，我们就需要建立一个临时分支来修复，修复后合并分支，然后将临时分支删除。
		当接到bug修复任务时，自然的需要建立一个临时的bug 分支来进行修复，但是此时dev分支下正在开发的工作还没有提交，但是短时间工作又完不成，bug修复任务又比较急，
		这时候就可以使用stash 功能，我们可以把工作现场“储藏”起来，等以后恢复现场后继续工作。
		使用 git stash 把现场“储藏”一下，然后修复bug，修复后 使用 git stash list 中查看 stash 。使用 git stash pop 回到工作现场同时删除 stash。
			关于stash 的理解，没有执行add操作处于stage状态的文件是会显示在各个分支中的会让你感到迷惑。在执行add 操作使文件进入stage暂存区的时候，文件在各个分支中是可见的，并且无法被stash的，
			所以stash起作用的全是stage或者head的文件，官网：也就是被你修改过得被追踪文件和暂存的变更---并将它保存到一个未完结的变更的堆栈中，随时可以重新应用。
	5、Feature分支
		在添加新功能时最好新建一个feature分支，在上面开发，完成后合并最后删除该分支。
		如果需要丢弃一个没有被合并的分支，可以通过 git branch -D <name> 强行删除。
	6、多人协作
		在从远程克隆的时候，实际上把本地的master分支和远程的master分支对应起来了，并且远程的仓库默认的名称是origin：
		$ git remote

		---------------------
		origin
		---------------------		
	或者使用
		$ git remote -v
		---------------------
		origin git@github.com:hewenyuann19930327/ProgramingLearning.git(fetch)
		origin git@github.com:hewenyuann19930327/ProgramingLearning.git(push)
		---------------------
		显示了可以抓取和推送的origin 的地址。如果没有推送权限，就看不到push的地址。
		
		推送分支
			就是把分支上的所有本地提交推送到远程库。推送时指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
		
		$ git push origin master
		推送其他分支的时候比如：dev 就改成
		$ git push origin dev 

		但是不是一定要把本地分支推送到远程仓库，一般来说：master 是主分支，因此要时刻与远程同步；dev是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；bug分支只用于在本地修复bug，
		就没必要推送到远程了，feature分支是否推送到远程，取决于你是否和你的小伙伴合作在上面开发。

		抓取分支
			多人协作时，大家都会往master 和dev 分支上推送各自的修改。当你的小伙伴从远程库clone时，默认情况下，小伙伴只能看到本地的master分支。现在小伙伴要在dev分支上开发，
			就必须创建远程origin 的dev分支到本地于是需要用到这个命令：
			$ git checkout -b dev origin/dev
			现在就可以在dev 上开发了，值得注意的是推送失败如果你试图推送的提交有冲突，解决办法也很简单，先用git pull 把最新的提交从 origin/dev 抓取下来，然后，在本地合并，解决冲突，再推送。
			git pull 失败了原因是没有指定本地 dev 分支与远程 origin/dev 分支的链接，根据提示，设置 dev 和 origin/dev 的链接：
			$ git branch --set-upstream dev origin/dev
			----------------------
			Branch dev set up to tarck remote branch dev from origin
			----------------------
			这之后再pull：
			$ git pull
			---------------------
			Auto-merging hello.py
			CONFLICT (content):Merge conflict in hello.py
			Automatic merge failed:fix conflicts and then commit the result.
			---------------------
			这回git pull 成功了，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样，解决以后再提交，再push。
		多人协作的工作模式通常是这样：
			1、首先，可以视图用 git push origin branch-name 推送自己的修改；
			2、如果推送失败，则因为远程分支比你的本地更新，需要先用 git pull 试图合并；
			3、如果合并有冲突，则解决冲突，并在本地提交；
			4、没有冲突或者解决掉冲突后，再用 git push origin branch-name 推送就能成功！
		如果 git pull 提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令 git branch --set-upstream branch-name origin/branch-name 。

		小结：
			查看远程库信息，使用 git remote -v ；
			本地新建的分支如果不推送到远程，对其他人就是不可见的；
			本地推送分支，使用 git push origin branch-name ，如果 推送失败，先用 git pull 抓取远程的新提交；
			本地创建和远程分支对应的分支，使用 git checkout -b branch-name origin/branch-name ,本地和远程分支的名称最好一致；
			建立本地分支和远程分支的关联，使用 git branch --set-upstream branch-name origin/branch-name；
			从远程抓取分支，使用 git pull ，如果有冲突，要先处理冲突。
//标签管理
	1、创建标签
		发布一个版本时，我们通常先在版本库中打一个标签（tag），这样就唯一确定了打标签时刻的版本。
		标签就是一个版本库的快照。
		Git中打标签非常简单，首先，切换到需要打标签的分支上：
		$ git checkout master 
		然后使用 git tag <name> 就可以打一个新标签了：
		$ git tag v1.0
		如果想为之前的提交打标签，只要使用git log 找到 commit id然后打上就可以了
		$ git tag v0.7 commit-id 
		可以使用命令 git tag 查看标签，但是标签不是按时间顺序列出的而是按字母列出的。可以用 git show <tag-name> 查看标签信息
	小结：
		命令 git tag <name> 用于新建一个标签，默认为HEAD，也可以指定一个commit-id；
		git tag -a <tag-name> -m "blabla..." 可以指定标签信息；
		git tag -s <tag-name> -m "blabla..." 可以用pgp签名标签；
		使用git tag 可以查看所有的标签。
	2、操作标签
		如果打错了标签是可以删除的：
		git tag -d v0.1
		------------------
		Deleted tag 'v0.1' (was commit-id)
		------------------
		创建的标签只存在本地，不会自动推送到远程。所以打错的标签可以在本地安全的删除。
		如果要推送某个标签到远程使用命令 git push origin <tag-name>,
		或者一次性推送全部的尚未推送到远程的本地标签 git push origin --tags
		如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除 git tag -d <tag-name>
		然后从远程删除： git push origin :refs/tags/<tag-name> 
	小结：
		命令 git push origin <tag-name>推送一个本地标签到远端库
		命令 git push origin <tag-name>推送所有本地尚未推送的标签到远端库
		使用 git tag -d <tag-name> 可以删除一个本地的标签
		使用 git push origin :refs/tags/<tag-name> 可以删除一个远端的标签
//使用GitHub
	在GitHub上，可以任意fork 开源仓库
	自己用fork后的仓库的读写权限
	可以推送pull request 给官方仓库来贡献代码